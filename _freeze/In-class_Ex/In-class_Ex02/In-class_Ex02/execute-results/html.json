{
  "hash": "3e7027c6992507016a0597b4c17c22b7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 2: Fundamental of Geospatial Data Visualisation and tmap Methods\"\nauthor: \"Ho Shi Hui\"\ndate: \"August 26, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true #run through the code if there is an error\n  echo: true #show all the code used\n  freeze: true #only render qmd files changes made\n---\n\n\n**Importing packages**\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n**MPSZ SHP 2014**\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp = st_read(dsn = \"D:/hoshihui/IS415-VAA/In-class_Ex/In-class_Ex02/data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\hoshihui\\IS415-VAA\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n**MPSZ 2014 KML version**\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_kml = st_read(\"D:/hoshihui/IS415-VAA/In-class_Ex/In-class_Ex02/data/MasterPlan2014SubzoneBoundaryWebKML.kml\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(mpsz14_shp, \"data/MasterPlan2014SubzoneBoundaryWebKML.kml\", delete_dsn = TRUE)\n# make the kml work if face with the error of the corrupted KML file like the code on top. it can help with other data format also besides kml\n#delete_dsn = TRUE to make sure the error message of the dataset is already present will not occur\n```\n:::\n\n\n**Preschool KML Version**\n\n::: {.cell}\n\n```{.r .cell-code}\npresch_kml = st_read(\"D:/hoshihui/IS415-VAA/In-class_Ex/In-class_Ex02/data/geospatial/PreSchoolsLocation.kml\") %>% st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\hoshihui\\IS415-VAA\\In-class_Ex\\In-class_Ex02\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n**MPSZ SHP 2019**\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp = st_read(dsn = \"D:/hoshihui/IS415-VAA/In-class_Ex/In-class_Ex02/data/geospatial\", layer =  \"MPSZ-2019\") %>% st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `D:\\hoshihui\\IS415-VAA\\In-class_Ex\\In-class_Ex02\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nst_crs(mpsz19_shp) # to check the EPSG 3414\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n\n```{.r .cell-code}\n#go to epsg.io to find the crs system\n# %>% to glue to syntax together\n```\n:::\n\n\n**MPSZ 2019 KML**\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml = st_read(\"D:/hoshihui/IS415-VAA/In-class_Ex/In-class_Ex02/data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `D:\\hoshihui\\IS415-VAA\\In-class_Ex\\In-class_Ex02\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n#in the kml if the multiplygon is between 0 to 360 with decial point it is not in projected coordinate system\n```\n:::\n\n\n**Population Latest Data**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata = read_csv(\"data/respopagesextod2023.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n#usually use the csv\n\n# to segregate \npopdata2023 <- popdata %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from= AG, \n              values_from=POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\n#wider to rotate the table\n#summarise to collate all the age group and name it POP and sum all the population value according to the group by\n#ungroup because we group the data already so must always ungroup after having a group function\n\ncolnames(popdata2023) #use this to show which you need to sum together for the young, economy active etc\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#data processing\npopdata2023 <- popdata2023 %>% \n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[14])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+\nrowSums(.[15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\npopdata2023 <- popdata2023 %>% mutate_at(.vars = vars(PA, SZ), .funs = list(toupper))\n#for common identifier have to same field name and same type so we are converting everything into upper case because we want to left join with MPSZ and the names on MPSZ are all in upper case\n```\n:::\n\n\n**Joining popdata2023 and mpsz19_shp**\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2023 <- left_join(mpsz19_shp, popdata2023, by = c(\"SUBZONE_N\" = \"SZ\"))\n\npop2023_mpsz <- left_join(popdata2023, mpsz19_shp, by = c(\"SZ\" = \"SUBZONE_N\"))\n# the sequence matter where the left join matters the mpsz and popdata where the first one is popdata2023 joining with mpsz19 while the other one is mpsz joining with popdata\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}