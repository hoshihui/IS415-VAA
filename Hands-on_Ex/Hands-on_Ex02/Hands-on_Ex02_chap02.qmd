---
title: "Hands-on Exercise 01 Chapter 2"
author: "Ho Shi Hui"
date: "19 August, 2024"
date-modified: "last-modified"
execute: 
  eval: true #run through the code if there is an error
  echo: true #show all the code used
  freeze: true #only render qmd files changes made
output:
  html_document:
    toc: yes
---
*Uploaded Netlify on 19 Aug*

**02 Thematic Mapping and GeoVisualisation with R**

# 2.1 Importing packages:

```{r}
pacman::p_load(sf, tmap, tidyverse, dpylr)
```

# 2.2 Importing data:

```{r}
mpsz <- st_read(dsn = "D:/hoshihui/IS415-VAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")

mpsz
```

## 2.2.1 Importing attribute data into R

```{r}
popdata <- read_csv("D:/hoshihui/IS415-VAA/Hands-on_Ex/Hands-on_Ex01/data/aspatial/respopagesextod2011to2020.csv")

popdata
```

## 2.2.2 Data Preparation

```{r}
#Data wrangling
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
rowSums(.[13:15]))%>%
mutate(`AGED`=rowSums(.[16:21])) %>%
mutate(`TOTAL`=rowSums(.[3:21])) %>%  
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)

popdata2020
#group_by: group the three column of daa together and each unique combination will be a separate group
#summarise: create a new column
#ungroup: remove the grouping so new operations applied to entire dataset
#pivot_wider(names_from = AG, values from = POP): reshapes data from long format to wide format. unique values in AG column become new column names and corresponding values from POP column are filled in these new column
#mutate(YOUNG = rowSums(.[3:6])): create new column called young with and sum the values
#select: select particular column for the final output
```

### 2.2.2.1 Joining attribute data and geospatial data

```{r}
popdata2020 <- popdata2020 %>% mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %>% filter(`ECONOMY ACTIVE` > 0)
popdata2020
#mutate_at: transformation to specific column
#.vars = vars(): specifies which column you want to modify
#.funs = list(): specifies functions you want to apply to those columns

mpsz_pop2020 <- left_join(mpsz, popdata2020, by = c("SUBZONE_N" = "SZ"))
mpsz_pop2020
#left-join: merging two data sets but comparing on mpsz data

write_rds(mpsz_pop2020, "D:/hoshihui/IS415-VAA/Hands-on_Ex/Hands-on_Ex01/data/respopagesextod2011to2020.csv")
#create a new file
```

# 2.3 Choropleth Mapping Geospatial Data using tmap

## 2.3.1 Plotting a choropleth map using qtm

```{r}
tmap_mode("plot") #static map because of plot
qtm(mpsz_pop2020, fill = "DEPENDENCY") #to map the attribute with the legends
#cannot customise anymore
```

##2.3.2 Creating choropleth map using tmap's elements

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))

#tm_compass: specify type of compass
#tm_scale_bar: adds a scale bar to the map
```

### 2.3.2.1 Drawing base map

```{r}
tm_shape(mpsz_pop2020) + tm_polygons() #can customise by adding borders legends etc
tm_shape(mpsz_pop2020) + tm_polygons("DEPENDENCY")
tm_shape(mpsz_pop2020) + tm_fill("DEPENDENCY") #without the borders
tm_shape(mpsz_pop2020) +tm_fill("DEPENDENCY") + tm_borders(lwd = 0.1, alpha = 1)
#lwd = line width
#alpha = control transparency level of the border, 0 mean transparent, 1 means opaque
#other arguments for tm_borders is col = border colour, lty: border line type
```

## 2.3.3 Data classification methods of tmap

```{r}
#Plotting choropleth maps with built in classification
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
#n represent the number of bins means categories the legend should show
#style: specifies method for dividing the data. quantile means divide so each category has equal data points. equal divide into 5 equal width interval. jenks are based on natural groupings, grouping similar values together
```

*DIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.*

*DIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?*

### 2.3.3.1 Plotting choropleth map with custom break

```{r}
summary(mpsz_pop2020$DEPENDENCY)
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

##2.3.4 Colour Scheme

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 6,
          style = "quantile",
          palette = "Blues") +
  tm_borders(alpha = 0.5)
#use tm_fill palette to change colour
#to reverse the colour shading add a - e.g., -Blues 
```

## 2.3.5 Map Layouts

### 2.3.5.1 Map legend

```{r}

tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "jenks", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)

#legend.hist.z = 0.1: sets height of histogram in the legend as a proportion of the legend height
```

### 2.3.5.2 Map style

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("cobalt")
```

### 2.3.5.3 Cartographic Furniture

```{r}
#drawing other furnitures like compass
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues",
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

## 2.3.6 Drawing Small Multiple Choropleth Maps

### 2.3.6.1 Assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+ 
  tm_polygons(c("DEPENDENCY","AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
#using the c in tm_fill
```

### 2.3.6.2 Defining a group-by variable in tm_facets

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
            title.position = c("center"), 
            title.size = 20) +
  tm_borders(alpha = 0.5)
```

### 2.3.6.3 Creating multiple stand-alone maps with tm_arrange()

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
#asp: specifies the aspect ratio of he arranged maps, the ratio of the width to the height of the output plot
```

## 2.3.7 Mapping Spatial Object Meeting a Selection Criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)

#to specify the data you want to use in mpsz_pop2020
```

# Notes from eLearn video
