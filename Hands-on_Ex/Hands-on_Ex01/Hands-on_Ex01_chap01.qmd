---
title: "Hands-on Exercise 01 Chapter 1"
author: "Ho Shi Hui"
date: "17 August, 2024"
date-modified: "last-modified"
output:
  html_document:
    toc: yes
---

**01 Geospatial Data Science with R**

# 1.1 Importing packages:

*pacman combines the functionality of base library related functions*

```{r}
pacman::p_load(sf, tidyverse)
```

# 1.2 Importing polygon feature data in shapefile format:

```{r}
mpsz = st_read(dsn = "D:/hoshihui/IS415-VAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

*st_read: imports data into R*

*field: refers to attribute or property associated with the geometrics*

```{r}
cyclingpath = st_read(dsn = "D:/hoshihui/IS415-VAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial", 
                  layer = "CyclingPathGazette")
```

# 1.3 Importing GIS data in kml format

```{r}
preschool = st_read( "D:/hoshihui/IS415-VAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial")
```

*kml format: can include all type of geometry*

# 1.4 Checking content of a simple feature data

## 1.4.1 Working with st_geometry()

```{r}
st_geometry(mpsz)
```

*to extract information about the feature class*

## 1.4.2 Working with glimpse()

```{r}
glimpse(mpsz)
```

*reveals the datatype of each field \[double precision values are ways to represent real numbers in computer programming\]*

## 1.4.3 Working with head()

```{r}
head(mpsz, n = 5)
```

*select the number of records to display all the information on the field*

# 1.5 Plotting the Geospatial Data

```{r}
plot(mpsz)
plot(mpsz["PLN_AREA_N"])
```

*plots out the first 9 out of the 15 attributes to show the area and subsections or a specific attribute in the code chunk*

```{r}
plot(st_geometry(mpsz))
```

*plotting only the geometry of the area*

# 1.6 Working with projection

## 1.6.1 Assigning EPSG code to a simple feature data frame Coordinate Reference System

```{r}
st_crs(mpsz)
mpsz3414 <- st_set_crs(mpsz, 3414)
```

*mpsz coordinate reference system dataframe \[for svy21, the EPSG code should be 3414 at the end\]*

## 1.6.2 Transforming the projection of preschool from wgs84 to svy21

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)
st_geometry(preschool3414)
```

*st_set_crs() not suitable because need to reproject not just change one thing*

# 1.7 Importing and Converting an Aspatial data

*Difference between geospatial and aspatial data is that geospatial has coordinates (longtitude, latitude etc) and spatial features (points, line, polygon etc) while aspatial are descriptive attributes*

```{r}
listings <- read_csv("D:/hoshihui/IS415-VAA/Hands-on_Ex/Hands-on_Ex01/data/aspatial/listings.csv")
list(listings)
```

*list instead of glimpse to read the information of aspatial data*

## 1.7.1 Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs=4326) %>% st_transform(crs=3414)

glimpse(listings_sf)
```

*coords must list x then y coordinate. %\>% transform the newly created simple feature data frame into svy21 projected CRS*

# 1.8 Geoprocessing with sf package

## 1.8.1 Buffering

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30) #compute the 5-meter buffers

buffer_cycling$AREA <- st_area(buffer_cycling) #calculate the area of the buffers

sum(buffer_cycling$AREA) #total land needed
```

*for nQuadSegs each quarter circle will be made up of 30 line segments*

## 1.8.2 Point in polygon count

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
top_n(mpsz3414, 1, `PreSch Count`)
```

*st_intersects() identify pre-schools inside each Planning Subzone and lengths() calculate number of pre-schools within the planning subzone* *top_n list the subzone with most number of preschool. top_n(x: data frame, n: number of row to return, wt: variable to use for ordering)*

**1.8.3 Calculate density**\*

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

*mutate() is to compute density*

# 1.9 Exploratory Data Analysis

```{r}
hist(mpsz3414$`PreSch Density`) #histogram

#ggplot for histogram
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")

#ggplot for scatterplot
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

*aes is to map the Pre School Density while as.numeric is to treat the data as a numeric value. geom_hist is for histogram while geom_point is for scatterplot*
